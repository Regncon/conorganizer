package formsubmission

import (
	"net/http"
	"github.com/go-chi/chi/v5"
	"fmt"

	"github.com/Regncon/conorganizer/service/keyvalue"
	"github.com/Regncon/conorganizer/models"
	"database/sql"
	"github.com/nats-io/nats.go/jetstream"
	datastar "github.com/starfederation/datastar-go/datastar"
)

func UpdateTitle(eventRouter chi.Router, db *sql.DB, kv jetstream.KeyValue) {
	eventRouter.Put("/", func(w http.ResponseWriter, r *http.Request) {
		type Store struct {
			Input string `json:"title"`
		}
		store := &Store{}

		if err := datastar.ReadSignals(r, store); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}

		query := `UPDATE events SET title = ? WHERE id = ?`
		_, err := db.Exec(query, store.Input, eventID)
		if err != nil {
			http.Error(w, "Failed to update the title for event in the database", http.StatusInternalServerError)
			return
		}

		/*
			if err := datastar.PatchSignals(store); err != nil {
				http.Error(w, "Failed to write signals", http.StatusInternalServerError)
				return
			}
		*/

		if err := keyvalue.BroadcastUpdate(kv, r); err != nil {
			http.Error(w, "Failed to broadcast update", http.StatusInternalServerError)
			return
		}
	})
}

func UpdateIntro(eventRouter chi.Router, db *sql.DB, kv jetstream.KeyValue) {
	eventRouter.Put("/", func(w http.ResponseWriter, r *http.Request) {
		type Store struct {
			Input string `json:"intro"`
		}
		store := &Store{}

		if err := datastar.ReadSignals(r, store); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}

		query := `UPDATE events SET intro = ? WHERE id = ?`
		_, err := db.Exec(query, store.Input, eventID)
		if err != nil {
			http.Error(w, "Failed to update the intro for event in the database", http.StatusInternalServerError)
			return
		}
		if err := keyvalue.BroadcastUpdate(kv, r); err != nil {
			http.Error(w, "Failed to broadcast update", http.StatusInternalServerError)
			return
		}
	})
}

func UpdateType(eventRouter chi.Router, db *sql.DB, kv jetstream.KeyValue) {
	eventRouter.Put("/", func(w http.ResponseWriter, r *http.Request) {
		type Store struct {
			Input string `json:"type"`
		}
		store := &Store{}

		if err := datastar.ReadSignals(r, store); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}

		query := `UPDATE events SET event_type = ? WHERE id = ?`
		_, err := db.Exec(query, store.Input, eventID)
		if err != nil {
			http.Error(w, "Failed to update the type for event in the database", http.StatusInternalServerError)
			return
		}
		if err := keyvalue.BroadcastUpdate(kv, r); err != nil {
			http.Error(w, "Failed to broadcast update", http.StatusInternalServerError)
			return
		}
	})
}
func UpdateSystem(eventRouter chi.Router, db *sql.DB, kv jetstream.KeyValue) {
	eventRouter.Put("/", func(w http.ResponseWriter, r *http.Request) {
		type Store struct {
			Input string `json:"system"`
		}
		store := &Store{}

		if err := datastar.ReadSignals(r, store); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}

		query := `UPDATE events SET system = ? WHERE id = ?`
		_, err := db.Exec(query, store.Input, eventID)
		if err != nil {
			http.Error(w, "Failed to update the system for event in the database", http.StatusInternalServerError)
			return
		}
		if err := keyvalue.BroadcastUpdate(kv, r); err != nil {
			http.Error(w, "Failed to broadcast update", http.StatusInternalServerError)
			return
		}
	})
}
func UpdateDescription(eventRouter chi.Router, db *sql.DB, kv jetstream.KeyValue) {
	eventRouter.Put("/", func(w http.ResponseWriter, r *http.Request) {
		type Store struct {
			Input string `json:"description"`
		}
		store := &Store{}

		if err := datastar.ReadSignals(r, store); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}

		query := `UPDATE events SET description = ? WHERE id = ?`
		_, err := db.Exec(query, store.Input, eventID)
		if err != nil {
			http.Error(w, "Failed to update the description for event in the database", http.StatusInternalServerError)
			return
		}
		if err := keyvalue.BroadcastUpdate(kv, r); err != nil {
			http.Error(w, "Failed to broadcast update", http.StatusInternalServerError)
			return
		}
	})
}

templ aboutEvent(eventId string, title string, intro string, eventType models.EventType, image string, system string, description string) {
	<article class="form-card">
		<h4 class="form-card-title">Om arrangementet</h4>
		<section class="about-section">
			<label class="label-small color-strong form-group title">
				Tittel
				<div
					data-signals={ fmt.Sprintf("{title:'%s'}", title) }
				></div>
				<input
					name="title"
					class="input"
					type="text"
					data-bind="title"
					data-on-change={ datastar.PutSSE("/my-events/api/new/%s/title", eventId) }
					placeholder="Tittel pÃ¥ arrangementet"
					required
				/>
			</label>
			<label class="label-small color-strong form-group intro">
				Kjapp introduksjon
				<textarea
					name="intro"
					class="input"
					data-bind="intro"
					data-on-change={ datastar.PutSSE("/my-events/api/new/%s/intro", eventId) }
					rows="2"
					placeholder="Kjapp introduksjon til arrangementet"
					required
				>
					{ shouldShowStringValue(intro) }
				</textarea>
			</label>
			<label class="label-small color-strong form-group type">
				Type Arrangement
				<select
					data-signals={ fmt.Sprintf("{type:'%s'}", eventType) }
					data-bind="type"
					data-on-change={ datastar.PutSSE("/my-events/api/new/%s/type", eventId) }
					name="type"
					class="input"
					required
				>
					<option value="roleplay">Rollespill</option>
					<option value="boardgame">Brettspill</option>
					<option value="other">Annet</option>
				</select>
			</label>
			<a
				href={ "/my-events/new/" + eventId + "/image/" }
				class="btn btn--primary"
				style="place-self: center end; margin-right:  1rem"
			>
				Last opp bilde
			</a>
			<label class="label-small color-strong form-group system">
				System
				<div
					data-signals={ fmt.Sprintf("{system:'%s'}", system) }
				></div>
				<input
					name="system"
					class="input"
					type="text"
					data-bind="system"
					data-on-change={ datastar.PutSSE("/my-events/api/new/%s/system", eventId) }
					placeholder="Hva system er det?"
					required
				/>
			</label>
			<label class="label-small color-strong form-group description">
				Beskrivelse av Arrangementet
				<textarea
					name="description"
					class="input"
					data-bind="description"
					data-on-change={ datastar.PutSSE("/my-events/api/new/%s/description", eventId) }
					rows="15"
					placeholder="Beskrivelse av arrangementet"
					required
				>
					{ shouldShowStringValue(description) }
				</textarea>
			</label>
		</section>
	</article>
}
