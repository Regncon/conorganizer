package formsubmission

import (
	"net/http"
	"github.com/go-chi/chi/v5"

	"github.com/Regncon/conorganizer/service/keyvalue"
	"database/sql"
	"fmt"
	"github.com/nats-io/nats.go/jetstream"
	datastar "github.com/starfederation/datastar-go/datastar"
)

func UpdateName(eventRouter chi.Router, db *sql.DB, kv jetstream.KeyValue) {
	eventRouter.Put("/", func(w http.ResponseWriter, r *http.Request) {
		type Store struct {
			Input string `json:"name"`
		}
		store := &Store{}

		if err := datastar.ReadSignals(r, store); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}

		query := `UPDATE events SET host_name = ? WHERE id = ?`
		_, err := db.Exec(query, store.Input, eventID)
		if err != nil {
			http.Error(w, "Failed to update the name for event in the database", http.StatusInternalServerError)
			return
		}
		if err := keyvalue.BroadcastUpdate(kv, r); err != nil {
			http.Error(w, "Failed to broadcast update", http.StatusInternalServerError)
			return
		}
	})
}

func UpdateEmail(eventRouter chi.Router, db *sql.DB, kv jetstream.KeyValue) {
	eventRouter.Put("/", func(w http.ResponseWriter, r *http.Request) {
		type Store struct {
			Input string `json:"email"`
		}
		store := &Store{}

		if err := datastar.ReadSignals(r, store); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}

		query := `UPDATE events SET email = ? WHERE id = ?`
		_, err := db.Exec(query, store.Input, eventID)
		if err != nil {
			http.Error(w, "Failed to update the email for event in the database", http.StatusInternalServerError)
			return
		}

		if err := keyvalue.BroadcastUpdate(kv, r); err != nil {
			http.Error(w, "Failed to broadcast update", http.StatusInternalServerError)
			return
		}
	})
}
func UpdatePhone(eventRouter chi.Router, db *sql.DB, kv jetstream.KeyValue) {
	eventRouter.Put("/", func(w http.ResponseWriter, r *http.Request) {
		type Store struct {
			Input string `json:"phone"`
		}
		store := &Store{}

		if err := datastar.ReadSignals(r, store); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}

		query := `UPDATE events SET phone_number = ? WHERE id = ?`
		_, err := db.Exec(query, store.Input, eventID)
		if err != nil {
			http.Error(w, "Failed to update the phone for event in the database", http.StatusInternalServerError)
			return
		}

		if err := keyvalue.BroadcastUpdate(kv, r); err != nil {
			http.Error(w, "Failed to broadcast update", http.StatusInternalServerError)
			return
		}
	})
}

templ contactInfo(eventId string, name string, email string, phone string) {
	<article class="form-card">
		<h4 class="form-card-title">Om arrangøren</h4>
		<section class="organizer-section">
			<label class="label color-strong form-group">
				Arrangør
				<input
					type="text"
					name="name"
					data-bind="name"
					data-on-change={ datastar.PutSSE("/my-events/api/new/%s/name", eventId) }
					class="input"
					placeholder="Ditt navn"
					required
					autocomplete="name"
				/>
				<div data-signals={ fmt.Sprintf("{name:'%s'}", name) }></div>
			</label>
			<label class="label color-strong form-group">
				E-post
				<input
					data-signals={ fmt.Sprintf("{email:'%s'}", email) }
					type="email"
					data-bind="email"
					data-on-change={ datastar.PutSSE("/my-events/api/new/%s/email", eventId) }
					name="email"
					class="input"
					placeholder="Din e-post"
					required
					autocomplete="email"
				/>
			</label>
			<label class="label color-strong form-group">
				Telefon
				<input
					type="tel"
					data-signals={ fmt.Sprintf("{phone:'%s'}", phone) }
					data-bind="phone"
					data-on-change={ datastar.PutSSE("/my-events/api/new/%s/phone", eventId) }
					name="phone"
					class="input"
					placeholder="Ditt telefonnummer"
					required
					autocomplete="tel"
				/>
			</label>
		</section>
	</article>
}
