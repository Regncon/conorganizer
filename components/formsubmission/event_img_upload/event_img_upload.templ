package eventimgupload

import (
	"fmt"
	"io"
	"log/slog"
	"os"
	"strings"

	"database/sql"
	"github.com/Regncon/conorganizer/components"
	"github.com/Regncon/conorganizer/layouts"
	"github.com/Regncon/conorganizer/service/eventService"
	"github.com/Regncon/conorganizer/service/userctx"
	"github.com/go-chi/chi/v5"
	"net/http"
)

func EventImageRoute(router chi.Router, db *sql.DB, logger *slog.Logger) {
	router.Get("/", func(w http.ResponseWriter, r *http.Request) {
		eventId := chi.URLParam(r, "id")
		if eventId == "" {
			http.Error(w, "Event ID is required. Got: "+eventId, http.StatusBadRequest)
			return
		}
		var ctx = r.Context()
		layouts.Base(
			"Last opp blide",
			userctx.GetUserRequestInfo(ctx),
			page(eventId, db, logger),
		).Render(ctx, w)
	})
}

func EventImageFormSubmission(newEventRouter chi.Router, db *sql.DB, eventImageDir *string, logger *slog.Logger) {
	newEventRouter.Post("/", func(w http.ResponseWriter, r *http.Request) {
		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			logger.Error("Event ID is required")
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}
		logger.Info("Uploading event image", "eventID", eventID)

		file, header, err := r.FormFile("image")
		if err != nil {
			logger.Error("Failed to get image from form", "error", err)
			http.Error(w, "Failed to get image from form", http.StatusBadRequest)
			return
		}
		defer file.Close()
		imagePath := fmt.Sprintf("%s/%s_%s", *eventImageDir, eventID, header.Filename)
		out, err := os.Create(imagePath)
		if err != nil {
			logger.Error("Failed to create image file", "error", err)
			http.Error(w, "Failed to save image", http.StatusInternalServerError)
			return
		}
		defer out.Close()
		_, err = io.Copy(out, file)
		if err != nil {
			logger.Error("Failed to save image file", "error", err)
			http.Error(w, "Failed to save image", http.StatusInternalServerError)
			return
		}
		logger.Info("Image uploaded successfully", "path", imagePath)
		// Update the event with the iEventPictureRouteImage URL/path

		query := `UPDATE events SET image_url = ? WHERE id = ?`
		_, err = db.Exec(query, eventID+"_"+header.Filename, eventID)
		if err != nil {
			http.Error(w, "Failed to update the status for event in the database", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, fmt.Sprintf("/my-events/new/%s/image/", eventID), http.StatusSeeOther)
	})
}

func EventImageCroppedSubmission(newEventRouter chi.Router, db *sql.DB, eventImageDir *string, logger *slog.Logger) {
	newEventRouter.Post("/", func(w http.ResponseWriter, r *http.Request) {
		logger.Info("Received cropped image upload request")
		eventID := chi.URLParam(r, "id")
		if strings.TrimSpace(eventID) == "" {
			logger.Error("Event ID is required")
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}
		imageKind := r.FormValue("kind")
		if imageKind != "card" && imageKind != "banner" {
			logger.Error("Invalid image kind", "imageKind", imageKind)
			http.Error(w, "Invalid image kind", http.StatusBadRequest)
			return
		}
		logger.Info("Uploading cropped event image", "eventID", eventID, "imageKind", imageKind)
		file, _, err := r.FormFile("image")
		if err != nil {
			logger.Error("Failed to get image from form", "error", err)
			http.Error(w, "Failed to get image from form", http.StatusBadRequest)
			return
		}
		defer file.Close()
		filename := fmt.Sprintf("%s_%s.webp", eventID, imageKind)
		imagePath := fmt.Sprintf("%s/%s", *eventImageDir, filename)
		out, err := os.Create(imagePath)
		if err != nil {
			logger.Error("Failed to create image file", "error", err)
			http.Error(w, "Failed to save image", http.StatusInternalServerError)
			return
		}
		defer out.Close()
		_, err = io.Copy(out, file)
		if err != nil {
			logger.Error("Failed to save image file", "error", err)
			http.Error(w, "Failed to save image", http.StatusInternalServerError)
			return
		}
		logger.Info("Image uploaded successfully", "path", imagePath)
		http.Redirect(w, r, fmt.Sprintf("/my-events/new/%s/image/", eventID), http.StatusSeeOther)
	})
}

templ page(eventId string, db *sql.DB, logger *slog.Logger) {
	<style>
		.img-upload-form-content {
			display: flex;
			flex-direction: column; 
			gap: var(--responsive-pane-column-spacing);
		}
		.back-button-container {
			display: flex;
			align-items: flex-start;
		}
		.image-upload-container {
			display: flex;
			flex-direction: column;
			gap: var(--spacing-5x);
		}
		.image-upload-info-label {
			font-size: 14px;
			font-weight: 600;
		}
		.image-upload-file-form {
			display: flex;
			align-items: center;
			justify-content: flex-end;
			gap: var(--spacing-5x);
		}
		.event-image-thumbnail-display {
			max-width: 600px;
			margin: auto;
		}
	</style>
	{{event, eventErr := eventservice.GetEventById(eventId, db, logger)
var title, intro, imageUrl string
if eventErr == nil {
	title = event.Title
	intro = event.Intro
	imageUrl = event.ImageURL.String
}
	}}
	if eventErr != nil {
		<p>Error fetching events: { eventErr.Error() }</p>
		return
	}
	<script src="/static/web_components/banner_cropper.js"></script>
	@components.Breadcrumbs([]components.BreadcrumbPath{
		{Name: "Hjem", Url: "/"},
		{Name: "Mine Arrangementer", Url: "/my-events/"},
		{Name: "Nytt Arrangement", Url: "/my-events/new/" + eventId + "/"},
		{Name: "Last opp bilde", Url: ""},
	})
	<article class="page-content-container">
		<h1 class="page-heading">Last opp bilde</h1>
		<div class="img-upload-form-content">
		<div class="back-button-container">
				<a
					href={ "/my-events/new/" + eventId + "/" }
					class="btn btn--outline"
				>
					Tilbake til arrangementside
				</a>
		</div>
			<div class="surface-pane image-upload-container">
				<div class="item-card">
					<p class="image-upload-info-label">
						Vennligst ikke bruk AI/KI-genererte bilder
					</p>
					<p>
						Siden AI/KI-genererte bilder er et betent tema, ønsker vi i RegnCon ikke
						at arrangører skal bruke slike bilder som hovedbilde for arrangementet sitt.
						Om du er i tvil på bruk av bilder, anbefaler vi å finne bilder som er åpent
						tilgjengelige for bruk, eller bilder som ellers øvrig brukes for å demonstrere
						og promotere spillet/systemet du skal bruke på arrangementet.
					</p>
				</div>
				<form
					method="post"
					action={ "/my-events/api/new/" + eventId + "/upload" }
					enctype="multipart/form-data"
					class="image-upload-file-form"
				>
					<label>
						Velg bilde:
						<input
							type="file"
							name="image"
							accept="image/*"
							required
						/>
					</label>
					<button
						class="btn btn--primary"
						type="submit"
					>Last opp</button>
				</form>
			</div>
			<section class="surface-pane">
				<h4 class="surface-pane-title">Mobil og gruppevisning</h4>
				<div class="event-image-thumbnail-display">
					<banner-cropper
						event-id={ eventId }
						width="600"
						height="350"
						image-kind="card"
						image-url={ "/event-images/" + imageUrl }
					></banner-cropper>
					<div
						style="display: flex;
												flex-direction: column;
												align-items: center;
												gap: 1rem;
												background-color: var(--bg-base);"
						max-width="430px"
					>
						<h1 style="text-align:center; margin:0; ">{ title }</h1>
						<i style="overflow: clip;height: 38px; padding-inline:1rem;">{ intro }</i>
					</div>
				</div>
			</section>
			<section class="surface-pane" style="width: 1360px;">
				<h4 class="surface-pane-title">Desktop banner</h4>
				<banner-cropper
					event-id={ eventId }
					width="1360"
					height="400"
					image-kind="banner"
					image-url={ "/event-images/" + imageUrl }
				></banner-cropper>
				<div
					style="display: flex;
											flex-direction: column;
											align-items: center;
											gap: 1rem;
											background-color: var(--bg-base);"
					max-width="430px"
				>
					<h1 style="text-align:center; margin:0; ">{ title }</h1>
					<i style="overflow: clip;height: 38px; padding-inline:1rem;">{ intro }</i>
				</div>
			</section>
		</div>
	</article>
}
