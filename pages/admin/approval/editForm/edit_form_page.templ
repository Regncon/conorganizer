package edit_form

import (
	"context"
	"database/sql"
	"log/slog"
	"github.com/Regncon/conorganizer/components"
	"github.com/Regncon/conorganizer/service/eventService"
	"github.com/Regncon/conorganizer/components/formsubmission"
)

func getPreviousNext(ctx context.Context, db *sql.DB, logger *slog.Logger, currentID string) (components.PreviousNext, error) {
	const q = `
WITH ordered AS (
  SELECT
    id,
    title,
    image_url,
    LAG(id)        OVER (ORDER BY inserted_time DESC, id DESC) AS previous_id,
    LAG(title)     OVER (ORDER BY inserted_time DESC, id DESC) AS previous_title,
    LAG(image_url) OVER (ORDER BY inserted_time DESC, id DESC) AS previous_image_url,
    LEAD(id)       OVER (ORDER BY inserted_time DESC, id DESC) AS next_id,
    LEAD(title)    OVER (ORDER BY inserted_time DESC, id DESC) AS next_title,
    LEAD(image_url)OVER (ORDER BY inserted_time DESC, id DESC) AS next_image_url
  FROM events
  WHERE status = ?
)
SELECT previous_id, previous_title, previous_image_url,
       next_id,     next_title,     next_image_url
FROM ordered
WHERE id = ?;`

	var (
		prevID, prevTitle, prevImg sql.NullString
		nextID, nextTitle, nextImg sql.NullString
	)

	err := db.QueryRowContext(ctx, q, "Innsendt", currentID).
		Scan(&prevID, &prevTitle, &prevImg, &nextID, &nextTitle, &nextImg)
	if err != nil {
		if err == sql.ErrNoRows {
			// currentID isnâ€™t in the filtered set; return empty neighbors.
			return components.PreviousNext{}, nil
		}
		logger.Error("GetPreviousNext scan failed", "error", err)
		return components.PreviousNext{}, err
	}

	return components.PreviousNext{
		PreviousUrl:      nstr(prevID),
		PreviousTitle:    nstr(prevTitle),
		PreviousImageURL: nstr(prevImg),
		NextUrl:          nstr(nextID),
		NextTitle:        nstr(nextTitle),
		NextImageURL:     nstr(nextImg),
	}, nil
}

func nstr(ns sql.NullString) string {
	if ns.Valid {
		return ns.String
	}
	return ""
}

templ EditEventFormPage(ctx context.Context, eventId string, db *sql.DB, logger *slog.Logger) {
	<div id="edit-form-container" class="formsubmission-css-container">
		@EditEventFormPageContent(ctx, eventId, db, logger)
	</div>
}

templ EditEventFormPageContent(ctx context.Context, eventId string, db *sql.DB, logger *slog.Logger) {
	{{ previousNextData, err := getPreviousNext(ctx, db, logger, eventId) }}
	if err != nil {
		logger.Error("Failed to get previous/next data", "error", err)
		return
	}
	{{ event, eventErr := eventservice.GetEventById(eventId, db, logger) }}
	if eventErr != nil {
		<p>Error fetching events: { eventErr.Error() }</p>
		return
	}
	@components.Breadcrumbs([]components.BreadcrumbPath{
		{Name: "Hjem", Url: "/"},
		{Name: "Admin", Url: "/admin/"},
		{Name: "Godkjenning av Arrangementer", Url: "/admin/approval/"},
		{Name: "Rediger Arrangement", Url: ""},
	})
	@components.PreviousNextBar(previousNextData)
	<form
		class="formsubmission-wrapper"
	>
		<h1 class="color-strong">Rediger Arrangement</h1>
		@formsubmission.StatusCard(event)
		@formsubmission.FormBody(event)
	</form>
	@components.PreviousNextBar(previousNextData)
}
