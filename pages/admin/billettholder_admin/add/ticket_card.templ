package addbillettholder

import (
	"database/sql"
	"fmt"
	"github.com/Regncon/conorganizer/service/checkIn"
	"github.com/go-chi/chi/v5"
	"html"
	"log/slog"
	"net/http"
	"strconv"
	"strings"
	"unicode"
)

func highlightSearchTerm(text, searchTerm string) string {
	if len(searchTerm) == 0 {
		return html.EscapeString(text)
	}

	// Build a quick-lookup set of runes in searchTerm (lower-cased).
	set := make(map[rune]struct{}, len(searchTerm))
	for _, r := range searchTerm {
		set[unicode.ToLower(r)] = struct{}{}
	}

	var out strings.Builder
	for _, r := range text {
		escaped := html.EscapeString(string(r)) // protect any HTML in the input
		if _, ok := set[unicode.ToLower(r)]; ok {
			out.WriteString("<b style=\"color: var(--color-primary-strong);\">")
			out.WriteString(escaped)
			out.WriteString("</b>")
		} else {
			out.WriteString(escaped)
		}
	}

	return out.String()
}
func ConvertTicketToBillettholderRoute(
	router chi.Router,
	db *sql.DB,
	logger *slog.Logger,
) {
	router.Route("/convert/", func(ticketIdRouter chi.Router) {
		ticketIdRouter.Get("/{ticketID}/", func(w http.ResponseWriter, r *http.Request) {
			ticketIDStr := chi.URLParam(r, "ticketID")
			ticketID, err := strconv.Atoi(ticketIDStr)
			if err != nil {
				http.Error(w, "invalid ticket ID", http.StatusBadRequest)
				return
			}

			checkIn.ConvertTicketToBillettholder(ticketID, db, logger)
		})

	})
}

// creat a constant for ticket type middag it should have id 193284
const TicketTypeMiddag = 193284

templ ticketCard(ticket checkIn.CheckInTicket, searchTerm string) {
	<div class="card" style="display:flex; flex-direction:column; gap:0.5rem; padding: 1rem; border-radius: 8px; background: rgb(49, 53, 78); color: #ffffff;">
		<p style="margin:0;">
			<strong>Bestilling:</strong> @templ.Raw(highlightSearchTerm(strconv.Itoa(ticket.OrderID), searchTerm))
		</p>
		<p style="margin:0;">
			<strong>Type:</strong> @templ.Raw(highlightSearchTerm(ticket.Type, searchTerm))
		</p>
		<p style="margin:0;">
			<strong>Navn:</strong>
			<em>
				@templ.Raw(highlightSearchTerm(ticket.FirstName+""+ticket.LastName, searchTerm))
			</em>
		</p>
		<a
			href={ "mailto:" + ticket.Email }
			style="color: var(--link-color); text-decoration: underline; display: block; margin-top: 0.5rem;"
		>
			@templ.Raw(highlightSearchTerm(ticket.Email, searchTerm))
		</a>
		<div style="display: flex; align-items: center; gap:0.5rem; ">
			if ticket.IsOver18 {
				<img
					src="/static/icons/adults-only.svg"
					alt="adults only"
				/>
				<p><strong>Alder:</strong> Over 18</p>
			} else {
				<img
					width="34px"
					height="34px"
					src="/static/icons/child-friendly.svg"
					alt="child friendly"
				/>
				<p><strong>Alder:</strong> Under 18</p>
			}
		</div>
		if ticket.TypeId == TicketTypeMiddag {
			<p style="margin:0; color: var(--color-accent);">
				<strong>Merk:</strong> Dette er en middagsbillett.
			</p>
		} else {
			<button
				class="btn btn--outline"
				data-on-click={ templ.URL(fmt.Sprintf("@get('/admin/billettholder/add/api/convert/%s/')", strconv.Itoa(ticket.ID))) }
			>
				Konverter billett til deltager
			</button>
		}
	</div>
}
