package addbillettholder

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log/slog"
	"net/http"

	"github.com/Regncon/conorganizer/components"
	"github.com/Regncon/conorganizer/models"
	"github.com/Regncon/conorganizer/service/checkIn"
	"github.com/Regncon/conorganizer/service/billettholder"
	"github.com/delaneyj/toolbelt"
	"github.com/go-chi/chi/v5"
	"github.com/gorilla/sessions"
)

var searchTerm = ""

func CheckInTicketsSearchRoute(
	router chi.Router,
	db *sql.DB,
	logger *slog.Logger,
	store sessions.Store,
	notifyUpdate func(string),
) {
	router.Get("/search/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Println("search")

		datastarRaw := r.URL.Query().Get("datastar")
		if datastarRaw == "" {
			http.Error(w, "missing ?datastar param", http.StatusBadRequest)
			return
		}

		var payload struct {
			Search string `json:"search"`
		}
		if err := json.Unmarshal([]byte(datastarRaw), &payload); err != nil {
			http.Error(w, "invalid ?datastar JSON", http.StatusBadRequest)
			return
		}

		searchTerm = payload.Search
		fmt.Println("searchTerm", searchTerm)

		sessionID, _ := upsertSessionID(store, r, w)
		if notifyUpdate != nil {
			notifyUpdate(sessionID)
		}
	})
}

func upsertSessionID(store sessions.Store, r *http.Request, w http.ResponseWriter) (string, error) {
	sess, err := store.Get(r, "connections")
	if err != nil {
		return "", fmt.Errorf("failed to get session: %w", err)
	}
	id, ok := sess.Values["id"].(string)
	if !ok {
		id = toolbelt.NextEncodedID()
		sess.Values["id"] = id
		if err := sess.Save(r, w); err != nil {
			return "", fmt.Errorf("failed to save session: %w", err)
		}
	}
	return id, nil
}

func isBillettholder(ticketID int, bilettholdere []models.Billettholder) bool {
	for _, b := range bilettholdere {
		if b.TicketID == ticketID {
			return true
		}
	}
	return false
}

/*

	<input
		style="max-width: 30rem;"
		data-bind-search
		data-on-input__debounce.50ms="@get('/admin/billettholder/add/api/search/')"
		placeholder="Search..."
		type="text"
	/>
*/

templ AddBillettholderAdminPage(db *sql.DB, logger *slog.Logger) {
	{{ tickets, err := checkIn.GetTicketsFromCheckIn(logger, searchTerm) }}
	{{ billettholdere, err := billettholderService.GetBilettholdere(db, logger) }}
	<div id="add-billettholder-admin-container">
		@components.Breadcrumbs([]components.BreadcrumbPath{
			{Name: "Hjem", Url: "/"},
			{Name: "Admin", Url: "/admin/"},
			{Name: "Bilettholdere", Url: "/admin/billettholder/"},
			{Name: "Biletter", Url: ""},
		})
		<article style="display:flex; flex-direction:column; gap:1rem; padding: 1rem;">
			<h1 class="page-heading">Billetter</h1>
			<p class="page-heading-helptext">Her kan du legge til en ny billettholder</p>
			<div class="add-billettholder-admin-grid">
				if err != nil {
					<p>Failed to load tickets:</p>
				} else {
					for _, ticket := range tickets {
						@ticketCard(ticket, isBillettholder(ticket.ID, billettholdere), searchTerm)
					}
				}
			</div>
			<style>
				.add-billettholder-admin-grid {
					display: grid;
					grid-template-columns: repeat(
						auto-fit,
						minmax(var(--mobile-min-width), 1fr)
					);
					gap: 1rem;
				}
				@media (min-width: 600px) {
					.add-billettholder-admin-grid {
					}
				}
			</style>
		</article>
	</div>
}
