package billettholderadmin

import (
	"database/sql"
	"log/slog"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/gorilla/sessions"
	"github.com/Regncon/conorganizer/components"
	"github.com/Regncon/conorganizer/models"
)

var searchTerm = ""

func getBilettholdere(db *sql.DB, logger *slog.Logger) ([]models.Billettholder, error) {
	rows, err := db.Query("SELECT id, first_name, last_name, is_over_18, order_id  FROM billettholdere")
	if err != nil {
		logger.Error("Failed to query billettholdere", "error", err)
		return nil, err
	}
	defer rows.Close()

	var billettholdere []models.Billettholder
	for rows.Next() {
		var b models.Billettholder
		if err := rows.Scan(&b.ID, &b.FirstName, &b.LastName, &b.IsOver18, &b.OrderID); err != nil {
			logger.Error("Failed to scan billettholder", "error", err)
			return nil, err
		}
		billettholdere = append(billettholdere, b)
	}
	return billettholdere, nil
}

func billettholdereSearchRoute(
	router chi.Router,
	store sessions.Store,
	notifyUpdate func(string),
) {
	router.Get("/search/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Println("search")

		datastarRaw := r.URL.Query().Get("datastar")
		if datastarRaw == "" {
			http.Error(w, "missing ?datastar param", http.StatusBadRequest)
			return
		}

		var payload struct {
			Search string `json:"search"`
		}
		if err := json.Unmarshal([]byte(datastarRaw), &payload); err != nil {
			http.Error(w, "invalid ?datastar JSON", http.StatusBadRequest)
			return
		}

		searchTerm = payload.Search
		fmt.Println("searchTerm", searchTerm)

		sessionID, _ := upsertSessionID(store, r, w)
		if notifyUpdate != nil {
			notifyUpdate(sessionID)
		}
	})
}

templ BillettholderAdminPage(db *sql.DB, logger *slog.Logger) {
	{{ bilettholdere, err := getBilettholdere(db, logger) }}
	<div id="billettholder-admin-container">
		@components.Breadcrumbs([]components.BreadcrumbPath{
			{Name: "Hjem", Url: "/"},
			{Name: "Admin", Url: "/admin/"},
			{Name: "Bilettholdere", Url: ""},
		})
		<article style="display:flex; flex-direction:column; gap:1rem; padding: 1rem;">
			<h1>Billettholdere</h1>
			<h2>Her kan du se en oversikt over alle billettholdere</h2>
			<input
				style="max-width: 30rem;"
				data-bind-search
				data-on-input__debounce.50ms="@get('/admin/billettholder/api/search/')"
				placeholder="Search..."
				type="text"
			/>
			<a
				href="/admin/billettholder/add/"
				style="background-color: rgb(49, 53, 78);
                    max-width: var(--mobile-max-column-width);
                    border-radius: 2rem;
                    font-size: 4rem;
                    color: white;
                    text-align: center;
                    text-decoration: none;
                    font-weight: bold;
		        "
			>+</a>
			<div class="billettholder-admin-grid">
				<style>
					.billettholder-admin-grid {
						display: grid;
						grid-template-columns: repeat(
							auto-fit,
							minmax(var(--mobile-min-width), 1fr)
						);
						gap: 1rem;
					}
					@media (min-width: 600px) {
						.billettholder-admin-grid {
							padding: 1rem;
						}
					}
				</style>
				if err != nil {
					<p>Failed to load billettholdere.</p>
				} else {
					for _, billettholder := range bilettholdere {
						@billettholderCard(billettholder, searchTerm)
					}
				}
			</div>
		</article>
	</div>
}
