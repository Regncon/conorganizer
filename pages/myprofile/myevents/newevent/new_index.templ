package newEvent

import (
	"database/sql"
	"fmt"
	"context"

	"github.com/Regncon/conorganizer/layouts"
	"github.com/Regncon/conorganizer/service/userctx"
	"github.com/go-chi/chi/v5"
	datastar "github.com/starfederation/datastar-go/datastar"
	"log/slog"
	"net/http"
)

func NewEventLayoutRoute(router chi.Router, db *sql.DB, logger *slog.Logger) {
	router.Get("/", func(w http.ResponseWriter, r *http.Request) {
		eventId := chi.URLParam(r, "id")

		userId, userIdErr := userctx.GetIdFromUserIdInDbFromContext(r.Context(), db, logger)
		if userIdErr != nil {
			http.Error(w, userIdErr.Error(), http.StatusInternalServerError)
			return
		}

		selectErr, statusCode := validateEventExists(db, eventId, userId)
		if selectErr != nil && statusCode == http.StatusInternalServerError {
			http.Error(w, selectErr.Error(), http.StatusInternalServerError)
			return
		}

		if selectErr != nil && statusCode == http.StatusNotFound {
			http.Error(w, selectErr.Error(), http.StatusNotFound)
			return
		}

		eventTitle := getEventTitle(db, eventId)
		title := "Lag nytt arrangement"
		if eventTitle != "" {
			title = eventTitle
		}

		var ctx = r.Context()
		layouts.Base(
			title,
			userctx.GetUserRequestInfo(ctx),
			newEventIndex(eventId, userId, ctx, db, logger),
		).Render(ctx, w)
	})
}

templ newEventIndex(eventId string, userId string, ctx context.Context, db *sql.DB, logger *slog.Logger) {
	<div
		id="formsubmission-container"
		class="formsubmission-css-container"
		data-on-load={ datastar.GetSSE("/my-events/api/new/" + eventId) }
	>
		@NewEventFormPageContent(eventId, userId, ctx, db, logger)
	</div>
}

func validateEventExists(db *sql.DB, eventId string, userId string) (error, int) {
	var exists bool
	queryErr := db.QueryRow("SELECT EXISTS(SELECT 1 FROM events WHERE id = ? AND host = ?)", eventId, userId).Scan(&exists)
	if queryErr != nil {
		return queryErr, http.StatusInternalServerError
	}

	if !exists {
		return fmt.Errorf("event not found"), http.StatusNotFound
	}

	return nil, http.StatusOK
}

func getEventTitle(db *sql.DB, eventId string) string {
	var title string

	err := db.QueryRow("SELECT title FROM events WHERE id = ?", eventId).Scan(&title)

	if err != nil {
		return ""
	}

	return title
}
