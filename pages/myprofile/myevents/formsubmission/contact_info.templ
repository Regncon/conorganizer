package formsubmission

import (
	"net/http"
	"github.com/go-chi/chi/v5"

	"database/sql"
	//"encoding/json"
	"fmt"
	//"github.com/Regncon/conorganizer/pages/index"
	"github.com/nats-io/nats.go/jetstream"
	datastar "github.com/starfederation/datastar/sdk/go"
)

func UpdateEmail(eventRouter chi.Router, db *sql.DB, kv jetstream.KeyValue) {
	eventRouter.Put("/email", func(w http.ResponseWriter, r *http.Request) {
		fmt.Println("save email")
		type Store struct {
			Input string `json:"email"`
		}
		store := &Store{}

		if err := datastar.ReadSignals(r, store); err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		if store.Input == "" {
			fmt.Println("No input provided for email update")
			return
		}
		fmt.Println("input", store.Input)

		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}
		fmt.Println("eventID", eventID)

		query := `UPDATE events SET email = ? WHERE id = ?`
		_, err := db.Exec(query, store.Input, eventID)
		if err != nil {
			http.Error(w, "Failed to update the email for event in the database", http.StatusInternalServerError)
			return
		}
		return

		/*
			// Broadcast the update to all clients watching the same event
			ctx := r.Context()
			allKeys, err := kv.Keys(ctx)
			if err != nil {
				http.Error(w, "Failed to retrieve keys", http.StatusInternalServerError)
				return
			}

				for _, sessionID := range allKeys {
					mvc := &index.TodoMVC{}
					if entry, err := kv.Get(ctx, sessionID); err == nil {
						if err := json.Unmarshal(entry.Value(), mvc); err != nil {
							continue // Ignore unmarshaling errors for other sessions
						}
						mvc.EditingIdx = -1
						if err := saveMVC(ctx, mvc, sessionID, kv); err != nil {
							fmt.Printf("Failed to save MVC for key %s: %v\n", sessionID, err)
						}
					}
				}
		*/
	})
}

templ contactInfo(eventId string, name string, email string, phone int64) {
	<article class="form-card">
		<h4>Om arrangøren</h4>
		<section class="organizer-section">
			<section class="form-group">
				<label for="name" class="label color-strong">Arrangør</label>
				<input type="text" name="name" id="name" class="input" value={ shouldShowStringValue(name) } placeholder="Ditt navn" required/>
			</section>
			<section class="form-group">
				<label for="email" class="label color-strong">E-post</label>
				<input
					type="email"
					data-bind="email"
					data-on-click__debounce.100ms={ datastar.PutSSE("/my-events/api/new/%s/email", eventId) }
					name="email"
					id="email"
					class="input"
					value={ shouldShowStringValue(email) }
					placeholder="Din e-post"
					required
				/>
			</section>
			<section class="form-group">
				<label for="phone" class="label color-strong">Telefon</label>
				<input type="tel" name="phone" id="phone" class="input" value={ shouldShowNumberValue(phone) } placeholder="Ditt telefonnummer" required/>
			</section>
		</section>
	</article>
}
