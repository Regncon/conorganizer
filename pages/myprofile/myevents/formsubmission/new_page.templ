package formsubmission

import (
	"net/http"
	"github.com/go-chi/chi/v5"

	"database/sql"
	"fmt"
	"github.com/Regncon/conorganizer/models"
	"log/slog"
)

func SubmitFormRoute(newEventRouter chi.Router, db *sql.DB, logger *slog.Logger) {
	newEventRouter.Post("/submit", func(w http.ResponseWriter, r *http.Request) {
		eventID := chi.URLParam(r, "id")
		if eventID == "" {
			http.Error(w, "Event ID is required", http.StatusBadRequest)
			return
		}
		logger.Info("Submitting event", "eventID", eventID)

		query := `UPDATE events SET status = ? WHERE id = ?`
		_, err := db.Exec(query, models.EventStatusSubmitted, eventID)
		if err != nil {
			http.Error(w, "Failed to update the status for event in the database", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, fmt.Sprintf("/my-events/"), http.StatusSeeOther)
	})
}

templ NewEventFormPage(eventId string, userId string, db *sql.DB, logger *slog.Logger) {
	<div id="formsubmission-container" class="formsubmission-css-container">
		{{ event, eventErr := GetEventByUserAndEventID(userId, eventId, db, logger) }}
		if eventErr != nil {
			<p>Error fetching events: { eventErr.Error() }</p>
			return
		}
		<style>
            .formsubmission-wrapper {
                > * + .form-card {
                    margin-block-start: 1rem;
                }

                .label {
                    font-weight: 600;
                    font-size: 14px;
                }

                .label-small {
                    font-weight: 600;
                    font-size: 12px;
                }

                .form-group {
                    display: flex;
                    flex-direction: column;
                    gap: 0.3rem;
                }
                .form-group-checkbox {
                    display: flex;
                    gap: 0.3rem;
                    place-items: center;
                }

                .form-card {
                    display: grid;

                    h4 {
                        margin: 0;
                    }

                    .organizer-section {
                        display: grid;
                        gap: 1.25rem;
                    }

                    .about-section {
                        display: grid;
                        gap: 1.25rem;

                        .img {
                            display: flex;
                            flex-direction: column;
                            gap: 1.2rem;

                            img {
                                width: 100%;
                                height: 100%;
                                border-radius: var(--border-radius-medium);
                                object-fit: cover;
                            }
                        }
                    }

                    .details-section {
                        display: grid;
                        gap: 1.25rem;

                        .checkbox-background {
                            background-color: var(--bg-item);
                            border: 1px solid var(--bg-item-border);
                            padding: 0.75rem 0.5rem;
                            border-radius: var(--border-radius-medium);
                        }
                    }

                }

                .submit-section {
                    display: grid;
                    grid-template-columns: 0.7fr 0.3fr;
                    gap: 2rem;
                    margin-block-start: 1rem;
                    min-height: 6.125rem;
                    place-content: center;

                    p {
                        margin: 0;
                        place-self: center;
                    }

                    .btn {
                        align-self: end;
                        height: 3.625rem;
                        width: min(100%, 15rem);
                    }
                    /*
                     //TODO: remove this if button should not be white
                    */
                    .btn--outline {
                        border-width: 3px;
                        border-color: var(--btn-primary-bg);
                        color: var(--btn-primary-bg);
                    }
                }

                @container formsubmission-css-container (width > 42.31rem) {
                    .form-card:is(:not(.submit-section)) {
                        display: block;

                        .organizer-section {
                            display: flex;
                            justify-content: space-between;
                            .form-group {
                                gap: 0.5rem;
                            }
                        }

                        .about-section {
                            margin-block-start: 1rem;
                            grid-template-columns: 0.5fr 0.5fr;
                            grid-template-areas:
                                "title img"
                                "intro img"
                                "type system"
                                "description description";
                            .title {
                                grid-area: title;
                            }

                            .intro {
                                grid-area: intro;
                            }

                            .type {
                                grid-area: type;
                            }

                            .img {
                                grid-area: img;
                            }

                            .system {
                                grid-area: system;
                            }

                            .description {
                                grid-area: description;
                            }
                        }

                        .details-section {
                            margin-block-start: 1rem;
                            grid-template-columns: minmax(7.5rem, 0.4fr) minmax(12.5rem, 0.6fr);
                            grid-template-areas:
                                "age-group age-group-description"
                                "duration duration-description"
                                "beginner-friendly beginner-friendly-description"
                                "english english-description"
                                "player-count player-count-description"
                                "other-notes other-notes";

                            .age-group {
                                grid-area: age-group;
                            }

                            .age-group-description {
                                grid-area: age-group-description;
                            }

                            .duration {
                                grid-area: duration;
                            }

                            .duration-description {
                                grid-area: duration-description;
                            }

                            .beginner-friendly {
                                grid-area: beginner-friendly;
                            }

                            .beginner-friendly-description {
                                grid-area: beginner-friendly-description;
                            }

                            .can-be-english {
                                grid-area: can-be-english;
                            }

                            .can-be-english-description {
                                grid-area: can-be-english-description;
                            }

                            .player-count {
                                grid-area: player-count;
                            }

                            .player-count-description {
                                grid-area: player-count-description;
                            }

                            .other-notes {
                                grid-area: other-notes;
                            }

                        }

                    }

                }

            }
        </style>
		.
		<form
			class="formsubmission-wrapper"
			action={ "/my-events/api/new/" + eventId + "/submit" }
			method="post"
		>
			<h1 class="color-strong">Nytt Arrangement</h1>
			@contactInfo(
				eventId,
				event.HostName,
				event.Email,
				event.PhoneNumber,
			)
			@aboutEvent(
				eventId,
				event.Title,
				event.Intro,
				event.EventType,
				event.ImageURL.String,
				event.System.String,
				event.Description,
			)
			@otherDetails(eventId, event.AgeGroup, event.Runtime)
			@submitSection()
		</form>
	</div>
}

func GetEventByUserAndEventID(userId string, eventID string, db *sql.DB, logger *slog.Logger) (*models.Event, error) {
	if userId == "" {
		logger.Error("Unauthorized", "User is not logged in")
		return nil, fmt.Errorf("unauthorized access")
	}

	/*userDbId, userDbIdErr := userctx.GetIdFromUserIdInDb(userId, db, logger)
	if userDbIdErr != nil {
		logger.Error("Failed to get user ID from database", "error", userDbIdErr)
		return nil, fmt.Errorf("failed to get user ID from database: %w", userDbIdErr)
	}
	*/

	query := `
            SELECT
                id,
                title,
                intro,
                description,
                image_url,
                system,
                event_type,
                age_group,
                event_runtime,
                host_name,
                host,
                email,
                phone_number,
                room_id,
                pulje_name,
                max_players,
                beginner_friendly,
                experienced_only,
                can_be_run_in_english,
                status
            FROM events WHERE id = ?
            `
	row := db.QueryRow(query, eventID)

	var event models.Event
	if err := row.Scan(
		&event.ID,
		&event.Title,
		&event.Intro,
		&event.Description,
		&event.ImageURL,
		&event.System,
		&event.EventType,
		&event.AgeGroup,
		&event.Runtime,
		&event.HostName,
		&event.Host,
		&event.Email,
		&event.PhoneNumber,
		&event.RoomId,
		&event.PuljeName,
		&event.MaxPlayers,
		&event.BeginnerFriendly,
		&event.ExperiencedOnly,
		&event.CanBeRunInEnglish,
		&event.Status,
	); err != nil {
		if err == sql.ErrNoRows {
			return nil, nil // No event found
		}
		fmt.Printf("Error scanning event: %v\n", err)
		return nil, err
	}
	return &event, nil
}

func shouldShowStringValue(value string) string {
	if value != "" {
		return value
	}
	return ""
}

func shouldShowNumberValue(value int64) string {
	if value != 0 {
		return fmt.Sprintf("%d", value)
	}
	return ""
}
