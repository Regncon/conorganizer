package myevents

import (
	"database/sql"
	"fmt"
	"github.com/Regncon/conorganizer/components"
	"github.com/Regncon/conorganizer/models"
	"github.com/Regncon/conorganizer/service/userctx"
	"log/slog"
)

templ myEventsPage(userid string, db *sql.DB, logger *slog.Logger) {
	<div id="my-events-wrapper">
		@myEventsPageContent(userid, db, logger)
	</div>
}

templ myEventsPageContent(userid string, db *sql.DB, logger *slog.Logger) {
	@components.Breadcrumbs([]components.BreadcrumbPath{
		{Name: "Hjem", Url: "/"},
		{Name: "Mine Arrangementer", Url: ""},
	})
	<div class="page-content-container">
		<h1>Mine Arrangementer</h1>
		<div class="my-event-grid">
			@events(userid, db, logger)
		</div>
	</div>
	<style>
		.my-event-grid {
			display: grid;
			grid-template-columns: repeat(
				auto-fill,
				minmax(var(--mobile-min-width), 1fr)
			);
			gap: 1rem;
		}
	</style>
}

templ events(userid string, db *sql.DB, logger *slog.Logger) {
	{{ events := GetEventsByUserId(db, userid, logger) }}
	if len(events) == 0 {
		@createEvent()
	}
	if len(events) > 0 {
		for _, event := range events {
			@components.EventCard(event, true)
		}
		@createEvent()
	}
}

templ createEvent() {
	<form action="/my-events/api/create" method="post">
		<button
			type="submit"
			style="
                width: 100%;
                height: 100%;
                aspect-ratio: 41 / 34;
		        max-width: var(--mobile-max-column-width);
		        background-color: var(--bg-surface);
		        border-radius: var(--border-radius-small);
		        display: flex;
		        flex-direction: column;
		        text-decoration: none;
		        color: var(--color-primary-text);
		        box-sizing: border-box;
		        place-items: center;
		        place-content: center;
		        padding-block: 2rem;
		        text-align: center;
                border-color: var(--bg-item-border);
		        "
		>
			<h2 style="margin: 0">Legg til nytt arrangement</h2>
			<h1 style="margin: 0; font-size: 3rem">âž•</h1>
		</button>
	</form>
}

func GetEventsByUserId(db *sql.DB, userId string, logger *slog.Logger) []models.EventCardModel {
	var events []models.EventCardModel

	userDbId, userDbIdErr := userctx.GetIdFromUserIdInDb(userId, db, logger)
	if userDbIdErr != nil {
		logger.Error("userDbIdErr", userDbIdErr)
		return events
	}

	eventsQuery := "SELECT id, title, intro, status, system, host_name,beginner_friendly, event_type, age_group, event_runtime, can_be_run_in_english FROM events WHERE host = ?"
	rows, eventsQueryErr := db.Query(eventsQuery, userDbId)
	if eventsQueryErr != nil {
		logger.Error("Failed to query events", "user_id", userId, "error", eventsQueryErr)
		return events
	}
	defer rows.Close()

	for rows.Next() {
		var event models.EventCardModel
		if scanErr := rows.Scan(&event.Id, &event.Title, &event.Intro, &event.Status, &event.System, &event.HostName, &event.BeginnerFriendly, &event.EventType, &event.AgeGroup, &event.Runtime, &event.CanBeRunInEnglish); scanErr != nil {
			logger.Error("Failed to scan event row", "user_id", userId, "error", scanErr)
			return events
		}
		events = append(events, event)
	}
	fmt.Printf("Found %d events for user %s\n", len(events), userId)
	return events
}
