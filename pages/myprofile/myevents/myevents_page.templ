package myevents

import (
	"database/sql"
	"fmt"
	"github.com/Regncon/conorganizer/models"
	"github.com/Regncon/conorganizer/service/userctx"
	"log/slog"
)

type MyEvents struct {
	Id     string             `json:"id"`
	Title  string             `json:"title"`
	Intro  string             `json:"intro"`
	Status models.EventStatus `json:"status"`
}

templ myEventsPage(userid string, db *sql.DB, logger *slog.Logger) {
	<div id="my-events-wrapper">
		<h1>My Events</h1>
		<div class="my-event-grid">
			@events(userid, db, logger)
		</div>
		<style>
			.my-event-grid {
				display: grid;
				grid-template-columns: repeat(auto-fill, minmax(var(--mobile-min-width), 1fr));
				gap: 1rem;
			}
            @media (min-width: 600px) {
				.my-event-grid {
					padding: 1rem;
				}
			}
		</style>
	</div>
}

templ events(userid string, db *sql.DB, logger *slog.Logger) {
	{{ events := GetEventsByUserId(db, userid, logger) }}
	if len(events) == 0 {
		@newEvent()
	}
	if len(events) > 0 {
		for _, event := range events {
			<a
				href={ templ.URL(fmt.Sprintf("/my-events/new/%s", event.Id)) }
				style="
                    height: 20rem;
                    min-width: 20rem;
                    background-color: #3b4252;
                    border-radius: 1rem;
                    display: flex;
                    flex-direction: column;
                    text-decoration: none;
                    color: white;
                    box-sizing: border-box;
                "
			>
				<img
					src="/static/placeholder-small.webp"
					alt="Participants"
					style="max-width: 100%; height: 45%; object-fit: cover; border-radius: 1rem 1rem 0 0;"
				/>
				<div style="padding: 1rem;">
					if event.Status == models.EventStatusDraft {
						<span style="color:#C6A0F6">Kladd</span>
					} else if event.Status == models.EventStatusSubmitted {
						<span style="color:var(--color-primary)">Innsendt</span>
					}
					<h2>
						if event.Title != "" {
							{ event.Title }
						} else {
							Nytt arrangement
						}
					</h2>
					<h3
						style="display: -webkit-box;
                            -webkit-box-orient: vertical;
                            -webkit-line-clamp: 2;
                            overflow: hidden;"
					>
						if event.Intro != "" {
							{ event.Intro }
						} else {
							Legg til en kort beskrivelse
						}
					</h3>
				</div>
			</a>
		}
		@newEvent()
	}
}

templ newEvent() {
	<form action="/my-events/api/create" method="post">
		<button
			type="submit"
			style="
		        width: 100%;
		        height: 20rem;
		        max-width: var(--mobile-max-column-width);
		        background-color: #3b4252;
		        border-radius: 1rem;
		        display: flex;
		        flex-direction: column;
		        text-decoration: none;
		        color: white;
		        box-sizing: border-box;
		        place-items: center;
		        place-content: center;
		        padding-block: 2rem;
		        text-align: center;
		        "
		>
			<h2 style="margin: 0">Legg til nytt arrangement</h2>
			<h1 style="margin: 0; font-size: 3rem">âž•</h1>
		</button>
	</form>
}

func GetEventsByUserId(db *sql.DB, userId string, logger *slog.Logger) []MyEvents {
	var events []MyEvents

	userDbId, userDbIdErr := userctx.GetIdFromUserIdInDb(userId, db, logger)
	if userDbIdErr != nil {
		logger.Error("userDbIdErr", userDbIdErr)
		return events
	}

	eventsQuery := "SELECT id, title, intro, status FROM events WHERE host = ?"
	rows, eventsQueryErr := db.Query(eventsQuery, userDbId)
	if eventsQueryErr != nil {
		logger.Error("Failed to query events", "user_id", userId, "error", eventsQueryErr)
		return events
	}
	defer rows.Close()

	for rows.Next() {
		var event MyEvents
		if scanErr := rows.Scan(&event.Id, &event.Title, &event.Intro, &event.Status); scanErr != nil {
			logger.Error("Failed to scan event row", "user_id", userId, "error", scanErr)
			return events
		}
		events = append(events, event)
	}
	fmt.Printf("Found %d events for user %s\n", len(events), userId)
	return events
}
