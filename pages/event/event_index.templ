package event

import (
	"database/sql"
	"log/slog"
	"net/http"

	"fmt"
	"github.com/Regncon/conorganizer/components/event_components"
	"github.com/Regncon/conorganizer/layouts"
	"github.com/Regncon/conorganizer/service/eventService"
	"github.com/Regncon/conorganizer/service/requestctx"
	"github.com/Regncon/conorganizer/service/userctx"
	"github.com/go-chi/chi/v5"
	datastar "github.com/starfederation/datastar-go/datastar"
)

func eventLayoutRoute(router chi.Router, db *sql.DB, logger *slog.Logger, eventImageDir *string, err error) {

	router.Get("/event/{idx}", func(w http.ResponseWriter, r *http.Request) {
		eventID := chi.URLParam(r, "idx")
		if err != nil {
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}

		event, err := eventservice.GetEventById(eventID, db, logger)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		if event == nil {
			http.Error(w, "404 Event not found", http.StatusNotFound)
			return
		}
		var ctx = r.Context()
		var userInfo = userctx.GetUserRequestInfo(ctx)
		layouts.Base(
			event.Title,
			userInfo,
			eventIndex(event.ID, logger, db, eventImageDir, userInfo),
		).Render(ctx, w)
	})
}

templ eventIndex(id string, logger *slog.Logger, db *sql.DB, eventImageDir *string, userInfo requestctx.UserRequestInfo) {
	{{
		url := fmt.Sprintf("/event/api/%s", id)
	}}
	<div class="flex flex-col w-full min-h-screen bg-base-200">
		<div id="event-container" data-on-load={ datastar.GetSSE(url) } class="event-container">
			@event_page_content(id, logger, db, eventImageDir)
		</div>
	</div>
	@event_components.EventInterests(userInfo, db, logger)
}
