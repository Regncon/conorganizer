package eventForm

import (
	"database/sql"
	"fmt"
	"github.com/go-chi/chi/v5"
	datastar "github.com/starfederation/datastar/sdk/go"
	"log/slog"
	"net/http"
	"strconv"
	"strings"
)

type PuljeNameStruct struct {
	Name string `json:"name"`
}

type EventFormStruct struct {
	Title             string  `json:"title"`
	Description       string  `json:"description"`
	ImageURL          *string `json:"image_url,omitempty"`
	System            *string `json:"system,omitempty"`
	HostName          string  `json:"host_name"`
	PuljeName         *string `json:"pulje_name,omitempty"`
	MaxPlayers        int     `json:"max_players"`
	ChildFriendly     bool    `json:"child_friendly"`
	AdultsOnly        bool    `json:"adults_only"`
	BeginnerFriendly  bool    `json:"beginner_friendly"`
	ExperiencedOnly   bool    `json:"experienced_only"`
	CanBeRunInEnglish bool    `json:"can_be_run_in_english"`
	LongRunning       bool    `json:"long_running"`
	ShortRunning      bool    `json:"short_running"`
}

type ValidationResultStruct struct {
	IsTitleValid            bool
	IsDescriptionValid      bool
	IsImageURLValid         bool
	IsSystemValid           bool
	IsHostNameValid         bool
	IsPuljeNameValid        bool
	IsMaxPlayersValid       bool
	IsChildFriendlyValid    bool
	IsAdultsOnlyValid       bool
	IsBeginnerFriendlyValid bool
	IsExperiencedOnlyValid  bool
	IsLongRunningValid      bool
	IsShortRunningValid     bool
	IsValid                 bool
}

func SetupExampleInlineValidation(db *sql.DB, eventFormRouter chi.Router, logger *slog.Logger) error {
	eventFormRouter.Route("/inline_validation/data", func(dataRouter chi.Router) {
		checkEventFromValidity := func(eventForm *EventFormStruct) ValidationResultStruct {
			isTitleValid := len(eventForm.Title) > 3
			isDescriptionValid := len(eventForm.Description) > 3
			isMaxPlayersValid := eventForm.MaxPlayers > 0 && eventForm.MaxPlayers <= 18
			isSystemValid := eventForm.System != nil && len(*eventForm.System) > 2
			isHostNameValid := len(eventForm.HostName) > 2
			isImageURLValid := eventForm.ImageURL != nil && strings.Contains(*eventForm.ImageURL, "imgur.com")

			var isPuljeNameValid = false

			puljeNames, puljeNamesError := getPuljeNames(db, logger)
			if puljeNamesError != nil {
				logger.Error("Error getting pulje names", "puljeNamesError", puljeNamesError)
			}

			puljeNameInt, puljeNameToIntError := strconv.Atoi(*eventForm.PuljeName)
			if puljeNameToIntError != nil {
				logger.Error("Invalid pulje name format", "puljeNameToIntError", puljeNameToIntError)
			}

			isPuljeNameValid = puljeNameInt > 0 && len(puljeNames) > 0 && puljeNameInt <= len(puljeNames)

			isChildFriendly := eventForm.ChildFriendly && !eventForm.AdultsOnly
			isAdultsOnly := eventForm.AdultsOnly && !eventForm.ChildFriendly

			println("isChildFriendly", isChildFriendly)
			println("isAdultsOnly", isAdultsOnly)

			isBeginnerFriendly := eventForm.BeginnerFriendly && !eventForm.ExperiencedOnly
			isExperiencedOnly := eventForm.ExperiencedOnly && !eventForm.BeginnerFriendly

			println("isBeginnerFriendly", isBeginnerFriendly)
			println("isExperiencedOnly", isExperiencedOnly)

			isLongRunning := eventForm.LongRunning && !eventForm.ShortRunning
			isShortRunning := eventForm.ShortRunning && !eventForm.LongRunning

			isValid :=
				isTitleValid &&
					isDescriptionValid &&
					isMaxPlayersValid &&
					isSystemValid &&
					isHostNameValid &&
					isPuljeNameValid &&
					isChildFriendly &&
					isAdultsOnly &&
					isBeginnerFriendly &&
					isExperiencedOnly &&
					isLongRunning &&
					isShortRunning

			return ValidationResultStruct{
				IsTitleValid:            isTitleValid,
				IsDescriptionValid:      isDescriptionValid,
				IsImageURLValid:         isImageURLValid,
				IsMaxPlayersValid:       isMaxPlayersValid,
				IsSystemValid:           isSystemValid,
				IsHostNameValid:         isHostNameValid,
				IsPuljeNameValid:        isPuljeNameValid,
				IsChildFriendlyValid:    eventForm.ChildFriendly,
				IsAdultsOnlyValid:       eventForm.AdultsOnly,
				IsBeginnerFriendlyValid: eventForm.BeginnerFriendly,
				IsExperiencedOnlyValid:  eventForm.ExperiencedOnly,
				IsLongRunningValid:      eventForm.LongRunning,
				IsShortRunningValid:     eventForm.ShortRunning,
				IsValid:                 isValid,
			}
		}

		dataRouter.Get("/", func(w http.ResponseWriter, r *http.Request) {
			eventForm := &EventFormStruct{}
			if err := datastar.ReadSignals(r, eventForm); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			sse := datastar.NewSSE(w, r)
			eventFormValidationResult := checkEventFromValidity(eventForm)
			sse.MergeFragmentTempl(inlineValidationFormEventComponent(eventForm, eventFormValidationResult))
		})

		dataRouter.Put("/", func(w http.ResponseWriter, r *http.Request) {
			eventForm := &EventFormStruct{}
			if err := datastar.ReadSignals(r, eventForm); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			eventFormValidationResult := checkEventFromValidity(eventForm)
			sse := datastar.NewSSE(w, r)
			var node templ.Component

			if !eventFormValidationResult.IsValid {
				node = inlineValidationFormEventComponent(eventForm, eventFormValidationResult)
			}

			if eventFormValidationResult.IsValid {
				_, err := saveNewFormEvent(db, logger, eventForm, w)
				if err != nil {
					node = inlineValidationFailedSaving(err)
				}
				node = inlineValidationThankYou()
			}

			fmt.Printf("Validation Result: %+v\n", eventFormValidationResult)

			fmt.Printf("Submitted Event Form:\n"+
				"Title: %s\n"+
				"Description: %s\n"+
				"ImageURL: %s\n"+
				"System: %s\n"+
				"HostName: %s\n"+
				"Host: %s\n"+
				"PuljeName: %s\n"+
				"MaxPlayers: %d\n"+
				"ChildFriendly: %t\n"+
				"AdultsOnly: %t\n"+
				"BeginnerFriendly: %t\n"+
				"ExperiencedOnly: %t\n"+
				"CanBeRunInEnglish: %t\n"+
				"LongRunning: %t\n"+
				"ShortRunning: %t\n",
				eventForm.Title,
				eventForm.Description,
				ptrToString(eventForm.ImageURL),
				ptrToString(eventForm.System),
				eventForm.HostName,
				ptrToString(eventForm.PuljeName),
				eventForm.MaxPlayers,
				eventForm.ChildFriendly,
				eventForm.AdultsOnly,
				eventForm.BeginnerFriendly,
				eventForm.ExperiencedOnly,
				eventForm.CanBeRunInEnglish,
				eventForm.LongRunning,
				eventForm.ShortRunning,
			)

			sse.MergeFragmentTempl(node)
		})
	})

	return nil
}
func ptrToString(s *string) string {
	if s == nil {
		return "nil"
	}
	return *s
}

type InputType string

const (
	Text   InputType = "text"
	Number InputType = "number"
)

templ inputValidationComponent(label string, inputType InputType, field string, isValid bool, isNotValidErrorLabelFmt string, labelArgs ...any) {
	<div class="form-control">
		<label class="label">
			<span class="label-text">{ label }</span>
		</label>
		<input
			if inputType == Number {
				type="number"
			} else {
				type="text"
			}
			class={ "input input-bordered", templ.KV("input-error",!isValid) }
			data-bind={ field }
			data-on-keydown__debounce.500ms={ datastar.GetSSE("/event/api/new/inline_validation/data") }
			data-testid={ "input_" + field }
			if inputType == Number {
				min="1"
			}
			if inputType == Number {
				max="18"
			}
		/>
		if !isValid {
			<label class="text-sm font-bold text-error" data-testid={ "validation_" + field }>{ fmt.Sprintf( isNotValidErrorLabelFmt, labelArgs...) }</label>
		}
	</div>
}

templ checkboxValidationComponent(label, field string, isValid bool, isNotValidErrorLabelFmt string, labelArgs ...any) {
	<div class="form-control">
		<label class="cursor-pointer label">
			<span class="label-text">{ label }</span>
			<input
				type="checkbox"
				class="toggle"
				data-bind={ field }
				data-on-click__debounce.100ms={ datastar.GetSSE("/event/api/new/inline_validation/data") }
				data-testid={ field + "_input" }
			/>
		</label>
		if !isValid {
			<label class="text-sm font-bold text-error" data-testid={ "validation_" + field }>{ fmt.Sprintf( isNotValidErrorLabelFmt, labelArgs...) }</label>
		}
	</div>
}

templ radioValidationComponent(label, field string, isValid bool, isNotValidErrorLabelFmt string, labelArgs ...any) {
	<div class="form-control">
		<label class="label">
			<span class="label-text">{ label }</span>
		</label>
		<div class="flex flex-col gap-2">
			<label class="cursor-pointer flex items-center gap-2">
				<input
					type="radio"
					name={ field }
					value="1"
					class="radio"
					data-bind={ field }
					data-on-click__debounce.100ms={ datastar.GetSSE("/event/api/new/inline_validation/data") }
					data-testid={ field + "_1" }
				/>
				<span>Fredag kveld</span>
			</label>
			<label class="cursor-pointer flex items-center gap-2">
				<input
					type="radio"
					name={ field }
					value="2"
					class="radio"
					data-bind={ field }
					data-on-click__debounce.100ms={ datastar.GetSSE("/event/api/new/inline_validation/data") }
					data-testid={ field + "_2" }
				/>
				<span>Lørdag morgen</span>
			</label>
			<label class="cursor-pointer flex items-center gap-2">
				<input
					type="radio"
					name={ field }
					value="3"
					class="radio"
					data-bind={ field }
					data-on-click__debounce.100ms={ datastar.GetSSE("/event/api/new/inline_validation/data") }
					data-testid={ field + "_3" }
				/>
				<span>Lørdag kveld</span>
			</label>
			<label class="cursor-pointer flex items-center gap-2">
				<input
					type="radio"
					name={ field }
					value="4"
					class="radio"
					data-bind={ field }
					data-on-click__debounce.100ms={ datastar.GetSSE("/event/api/new/inline_validation/data") }
					data-testid={ field + "_4" }
				/>
				<span>Søndag morgen</span>
			</label>
		</div>
		if !isValid {
			<label class="text-sm font-bold text-error" data-testid={ "validation_" + field }>{ fmt.Sprintf( isNotValidErrorLabelFmt, labelArgs...) }</label>
		}
	</div>
}

templ inlineValidationFormEventComponent(eventForm *EventFormStruct, eventFormValidationResult ValidationResultStruct) {
	<div
		id="inline_validation"
		class="flex flex-col gap-4"
		data-signals__ifmissing={ templ.JSONString(eventForm) }
	>
		<div class="text-2xl font-bold">Sign Up</div>
		<div>
			{ templ.JSONString(eventForm) }
			@inputValidationComponent("Title", "text", "title", eventFormValidationResult.IsTitleValid, "Title must be at least 3 characters long")
			@inputValidationComponent("Description", "text", "description", eventFormValidationResult.IsDescriptionValid, "Description must be at least 3 characters long")
			@inputValidationComponent("Image URL", "text", "image_url", eventFormValidationResult.IsImageURLValid, "Image URL must be from imgur.com")
			@inputValidationComponent("System", "text", "system", eventFormValidationResult.IsSystemValid, "System must be at least 3 characters long")
			@inputValidationComponent("Host Name", "text", "host_name", eventFormValidationResult.IsHostNameValid, "Host Name must be at least 3 characters long")
			@radioValidationComponent("Pulje Name", "pulje_name", eventFormValidationResult.IsPuljeNameValid, "Pulje Name must be selected")
			@inputValidationComponent("Max Players", "number", "max_players", eventFormValidationResult.IsMaxPlayersValid, "Max Players must be between 1 and 18")
			@checkboxValidationComponent("Child Friendly", "child_friendly", eventFormValidationResult.IsChildFriendlyValid, "Child Friendly and Adults Only cannot both be selected")
			@checkboxValidationComponent("Adults Only", "adults_only", eventFormValidationResult.IsAdultsOnlyValid, "Child Friendly and Adults Only cannot both be selected")
			@checkboxValidationComponent("Beginner Friendly", "beginner_friendly", eventFormValidationResult.IsBeginnerFriendlyValid, "Beginner Friendly and Experienced Only cannot both be selected")
			@checkboxValidationComponent("Experienced Only", "experienced_only", eventFormValidationResult.IsExperiencedOnlyValid, "Beginner Friendly and Experienced Only cannot both be selected")
			@checkboxValidationComponent("Can Be Run In English", "can_be_run_in_english", true, "")
			@checkboxValidationComponent("Long Running", "long_running", eventFormValidationResult.IsLongRunningValid, "Long Running and Short Running cannot both be selected")
			@checkboxValidationComponent("Short Running", "short_running", eventFormValidationResult.IsShortRunningValid, "Long Running and Short Running cannot both be selected")
		</div>
		<button
			class="btn btn-success"
			disabled?={ !eventFormValidationResult.IsValid }
			data-on-submit__debounce.500ms={ datastar.PutSSE("/event/api/new/inline_validation/data") }
			data-testid="submit_button"
		>
			Send inn arrangement
		</button>
		<div class="divider"></div>
		<code>
			<pre data-text="ctx.signals.JSON()"></pre>
		</code>
	</div>
}

templ inlineValidationThankYou() {
	<div id="inline_validation" class="alert alert-success">
		Thank you for signing up!
	</div>
}

templ inlineValidationFailedSaving(err error) {
	<div id="inline_validation" class="alert alert-error">
		Failed to save event. Please try again. Error: { fmt.Sprintf("%v", err) }
	</div>
}

templ EventFromValidation(data *EventFormStruct, vr ValidationResultStruct) {
	<form
		class="flex flex-col gap-4"
		data-signals__ifmissing={ templ.JSONString(data) }
	>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Tittel på spillmodul / arrangement</span>
			</label>
			<input class="input input-bordered" type="text" data-bind="title" data-testid="title_input"/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Beskrivelse</span>
			</label>
			<textarea class="textarea textarea-bordered" data-bind="description" data-testid="description_input"></textarea>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Bilde URL</span>
			</label>
			<input class="input input-bordered" type="text" data-bind="image_url" data-testid="image_url_input"/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">System</span>
			</label>
			<input class="input input-bordered" type="text" data-bind="system" data-testid="system_input"/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Navn på arrangør</span>
			</label>
			<input class="input input-bordered" type="text" data-bind="host_name" data-testid="host_name_input"/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Arrangør</span>
			</label>
			<input class="input input-bordered" type="text" data-bind="host" data-testid="host_input"/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Pulje navn</span>
			</label>
			<div class="flex flex-col gap-2">
				<label class="cursor-pointer flex items-center gap-2">
					<input type="radio" name="pulje_name" value="1" class="radio" data-bind="pulje_name" data-testid="pulje_name_1"/>
					<span>Fredag kveld</span>
				</label>
				<label class="cursor-pointer flex items-center gap-2">
					<input type="radio" name="pulje_name" value="2" class="radio" data-bind="pulje_name" data-testid="pulje_name_2"/>
					<span>Lørdag morgen</span>
				</label>
				<label class="cursor-pointer flex items-center gap-2">
					<input type="radio" name="pulje_name" value="3" class="radio" data-bind="pulje_name" data-testid="pulje_name_3"/>
					<span>Lørdag kveld</span>
				</label>
				<label class="cursor-pointer flex items-center gap-2">
					<input type="radio" name="pulje_name" value="4" class="radio" data-bind="pulje_name" data-testid="pulje_name_4"/>
					<span>Søndag morgen</span>
				</label>
			</div>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Maks antall spillere</span>
			</label>
			<input class="input input-bordered" type="number" data-bind="max_players" data-testid="max_players_input"/>
		</div>
		<div class="form-control">
			<label class="cursor-pointer label">
				<span class="label-text">Barnevennlig</span>
				<input type="checkbox" class="toggle" data-bind="child_friendly" data-testid="child_friendly_input"/>
			</label>
		</div>
		<div class="form-control">
			<label class="cursor-pointer label">
				<span class="label-text">Kun for voksne</span>
				<input type="checkbox" class="toggle" data-bind="adults_only" data-testid="adults_only_input"/>
			</label>
		</div>
		<div class="form-control">
			<label class="cursor-pointer label">
				<span class="label-text">Nybegynnervennlig</span>
				<input type="checkbox" class="toggle" data-bind="beginner_friendly" data-testid="beginner_friendly_input"/>
			</label>
		</div>
		<div class="form-control">
			<label class="cursor-pointer label">
				<span class="label-text">Kun for erfarne</span>
				<input type="checkbox" class="toggle" data-bind="experienced_only" data-testid="experienced_only_input"/>
			</label>
		</div>
		<div class="form-control">
			<label class="cursor-pointer label">
				<span class="label-text">Kan kjøres på engelsk</span>
				<input type="checkbox" class="toggle" data-bind="can_be_run_in_english" data-testid="can_be_run_in_english_input"/>
			</label>
		</div>
		<div class="form-control">
			<label class="cursor-pointer label">
				<span class="label-text">Langvarig</span>
				<input type="checkbox" class="toggle" data-bind="long_running" data-testid="long_running_input"/>
			</label>
		</div>
		<div class="form-control">
			<label class="cursor-pointer label">
				<span class="label-text">Kortvarig</span>
				<input type="checkbox" class="toggle" data-bind="short_running" data-testid="short_running_input"/>
			</label>
		</div>
		<div>
			<button
				class="btn btn-primary"
				type="submit"
				data-on-click={ datastar.PutSSE("/event/api/new/inline_validation/data") }
			>
				Send inn arrangement
			</button>
		</div>
	</form>
	<code>
		<pre data-text="ctx.signals.JSON()"></pre>
	</code>
}

// Dette er en ny templ-komponent som viser skjemaet med alle feltene.
// Merk at du kan legge til data-on-* attributter, inline validering, etc. etter behov.
templ EventForm() {
	<div>
		<h1>Melde på nytt arrangement</h1>
		@inlineValidationFormEventComponent(&EventFormStruct{}, ValidationResultStruct{})
	</div>
}

func saveNewFormEvent(db *sql.DB, logger *slog.Logger, eventForm *EventFormStruct, w http.ResponseWriter) (int64, error) {
	query := `
		INSERT INTO events (
			title,
			description,
			image_url,
			system,
			host_name,
			pulje_name,
			max_players,
			child_friendly,
			adults_only,
			beginner_friendly,
			experienced_only,
			can_be_run_in_english,
			long_running,
			short_running
		) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`

	result, insertError := db.Exec(query,
		eventForm.Title,
		eventForm.Description,
		eventForm.ImageURL,
		eventForm.System,
		eventForm.HostName,
		eventForm.PuljeName,
		eventForm.MaxPlayers,
		eventForm.ChildFriendly,
		eventForm.AdultsOnly,
		eventForm.BeginnerFriendly,
		eventForm.ExperiencedOnly,
		eventForm.CanBeRunInEnglish,
		eventForm.LongRunning,
		eventForm.ShortRunning,
	)

	if insertError != nil {
		logger.Error("Error updating event", "insertError", insertError)
		http.Error(w, fmt.Sprintf("Error updating event: %v", insertError), http.StatusBadRequest)
		return 0, insertError
	}

	rowsAffected, rowsAffectedErr := result.RowsAffected()
	if rowsAffectedErr != nil {
		logger.Error("Error getting rows affected", "rowsAffectedErr", rowsAffectedErr)
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return 0, rowsAffectedErr
	}

	if rowsAffected == 0 {
		logger.Error("Event not found or no changes made")
		http.Error(w, "Event not found or no changes made", http.StatusNotFound)
		return 0, nil
	}
	fmt.Printf("Event saved successfully: %v\n", eventForm)
	return result.LastInsertId()
}

func getPuljeNames(db *sql.DB, logger *slog.Logger) ([]PuljeNameStruct, error) {
	query := "SELECT name FROM puljer"
	rows, queryError := db.Query(query)
	if queryError != nil {
		return nil, queryError
	}

	defer rows.Close()

	var puljer []PuljeNameStruct

	for rows.Next() {
		var name string
		if scanError := rows.Scan(&name); scanError != nil {
			logger.Error("Error scanning pulje name", "scanError", scanError)
			return nil, scanError
		}
		puljer = append(puljer, PuljeNameStruct{Name: name})
	}

	if rowsError := rows.Err(); rowsError != nil {
		logger.Error("Error in rows iteration", "rowsError", rowsError)
		return nil, rowsError
	}

	return puljer, nil
}
