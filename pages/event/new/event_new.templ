package eventForm

import (
	"fmt"
	"github.com/go-chi/chi/v5"
	datastar "github.com/starfederation/datastar/sdk/go"
	"net/http"
	"strings"
)

func SetupExampleInlineValidation(examplesRouter chi.Router) error {

	examplesRouter.Route("/inline_validation/data", func(dataRouter chi.Router) {
		eventFormValidation := func(eventForm *inlineValidationEventForm) ValidationResult {
			isTitleValid := len(eventForm.Title) > 0
			isSummaryValid := len(eventForm.Summary) > 0
			isEmailValid := strings.Contains(eventForm.Email, "@") && strings.Contains(eventForm.Email, ".")
			isOrganizerNameValid := len(eventForm.OrganizerName) > 0
			isPhoneNumberValid := len(eventForm.PhoneNumber) >= 8
			isSystemValid := len(eventForm.System) > 0
			isDescriptionValid := len(eventForm.Description) > 0
			isGameTypeValid := eventForm.GameType != ""
			isMaxPlayersValid := eventForm.MaxPlayers > 0

			isTimeSlotValid := eventForm.FridayEvening || eventForm.SaturdayMorning || eventForm.SaturdayEvening || eventForm.SundayMorning

			isValid := isTitleValid &&
				isSummaryValid &&
				isEmailValid &&
				isOrganizerNameValid &&
				isPhoneNumberValid &&
				isSystemValid &&
				isDescriptionValid &&
				isGameTypeValid &&
				isMaxPlayersValid &&
				isTimeSlotValid

			return ValidationResult{
				IsTitleValid:         isTitleValid,
				IsSummaryValid:       isSummaryValid,
				IsEmailValid:         isEmailValid,
				IsOrganizerNameValid: isOrganizerNameValid,
				IsPhoneNumberValid:   isPhoneNumberValid,
				IsSystemValid:        isSystemValid,
				IsDescriptionValid:   isDescriptionValid,
				IsGameTypeValid:      isGameTypeValid,
				IsMaxPlayersValid:    isMaxPlayersValid,
				IsTimeSlotValid:      isTimeSlotValid,
				IsValid:              isValid,
			}
		}

		dataRouter.Get("/", func(w http.ResponseWriter, r *http.Request) {
			eventForm := &inlineValidationEventForm{}
			if err := datastar.ReadSignals(r, eventForm); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}
			sse := datastar.NewSSE(w, r)
			vr := eventFormValidation(eventForm)
			sse.MergeFragmentTempl(EventForm(eventForm, vr))
		})

		dataRouter.Post("/", func(w http.ResponseWriter, r *http.Request) {
			eventForm := &inlineValidationEventForm{}
			if err := datastar.ReadSignals(r, eventForm); err != nil {
				http.Error(w, err.Error(), http.StatusBadRequest)
				return
			}

			vr := eventFormValidation(eventForm)

			sse := datastar.NewSSE(w, r)
			var node templ.Component
			if !vr.IsValid {
				node = EventForm(eventForm, vr)
			} else {
				node = inlineValidationThankYou()
			}

			sse.MergeFragmentTempl(node)
		})
	})

	return nil
}

// ... resten av koden din (inline_validation osv.) ...

// Her definerer vi en struct for datafelt (hvis du ønsker å lese/skrive data via SSE/binding).
// Du kan justere feltnavnene og typene etter behov:
type inlineValidationEventForm struct {
	Title           string `json:"title"`
	Summary         string `json:"summary"`
	Email           string `json:"email"`
	OrganizerName   string `json:"organizerName"`
	PhoneNumber     string `json:"phoneNumber"`
	System          string `json:"system"`
	Description     string `json:"description"`
	GameType        string `json:"gameType"` // "Rollespel", "Brettspel", "LARP", "Annet"
	MaxPlayers      int    `json:"maxPlayers"`
	FridayEvening   bool   `json:"fridayEvening"`
	SaturdayMorning bool   `json:"saturdayMorning"`
	SaturdayEvening bool   `json:"saturdayEvening"`
	SundayMorning   bool   `json:"sundayMorning"`
}

type ValidationResult struct {
		IsTitleValid         bool
		IsSummaryValid       bool
		IsEmailValid         bool
		IsOrganizerNameValid bool
		IsPhoneNumberValid   bool
		IsSystemValid        bool
		IsDescriptionValid   bool
		IsGameTypeValid      bool
		IsMaxPlayersValid    bool
		IsTimeSlotValid      bool
		IsValid              bool
	}

templ inlineValidationFieldComponent(label, field string, isValid bool, isNotValidErrorLabelFmt string, labelArgs ...any) {
	<div class="form-control">
		<label class="label">
			<span class="label-text">{ label }</span>
		</label>
		<input
			class={ "input input-bordered", templ.KV("input-error",!isValid) }
			data-bind={ field }
			data-on-keydown__debounce.500ms={ datastar.GetSSE("/event/api/new/inline_validation/data") }
			data-testid={ "input_" + field }
		/>
		if !isValid {
			<label class="text-sm font-bold text-error" data-testid={ "validation_" + field }>{ fmt.Sprintf( isNotValidErrorLabelFmt, labelArgs...) }</label>
		}
	</div>
}

templ inlineValidationUserComponent(eventForm *inlineValidationEventForm, isEmailValid, isFirstNameValid, isLastNameValid, isValid bool) {
	<div
		id="inline_validation"
		class="flex flex-col gap-4"
		data-signals__ifmissing={ templ.JSONString(eventForm) }
	>
		<div class="text-2xl font-bold">Sign Up</div>
		<div>
			@inlineValidationFieldComponent("Email Address", "email", isEmailValid, "Email '%s' is already taken or is invalid.  Please enter another email.", eventForm.Email)
			@inlineValidationFieldComponent("First Name", "firstName", isFirstNameValid, "First name must be at least 2 characters.")
			@inlineValidationFieldComponent("Last Name", "lastName", isLastNameValid, "Last name must be at least 2 characters.")
		</div>
		<button
			class="btn btn-success"
			disabled?={ !isValid }
			data-on-click={ datastar.PostSSE("/event/api/new/inline_validation/data") }
			data-testid="submit_button"
		>
			Add User
		</button>
		<div class="divider"></div>
	</div>
}

templ inlineValidationThankYou() {
	<div id="inline_validation" class="alert alert-success">
		Thank you for signing up!
	</div>
}

// Dette er en ny templ-komponent som viser skjemaet med alle feltene.
// Merk at du kan legge til data-on-* attributter, inline validering, etc. etter behov.
templ EventForm(data *inlineValidationEventForm, vr ValidationResult) {
	<form
		class="flex flex-col gap-4"
		data-signals__ifmissing={ templ.JSONString(data) }
	>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Tittel på spillmodul / arrangement</span>
			</label>
			<input
				class="input input-bordered"
				type="text"
				data-bind="title"
				data-testid="title_input"
			/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Kort oppsummering</span>
			</label>
			<input
				class="input input-bordered"
				type="text"
				data-bind="summary"
				data-testid="summary_input"
			/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">E-postadresse</span>
			</label>
			<input
				class="input input-bordered"
				type="email"
				data-bind="email"
				data-testid="email_input"
			/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Arrangørens navn</span>
			</label>
			<input
				class="input input-bordered"
				type="text"
				data-bind="organizerName"
				data-testid="organizerName_input"
			/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Na telefonnummer kan vi nå deg på?</span>
			</label>
			<input
				class="input input-bordered"
				type="text"
				data-bind="phoneNumber"
				data-testid="phoneNumber_input"
			/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Spillsystem</span>
			</label>
			<input
				class="input input-bordered"
				type="text"
				data-bind="system"
				data-testid="system_input"
			/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Skildring av modulen (Inkl test i programmet)</span>
			</label>
			<textarea
				class="textarea textarea-bordered"
				data-bind="description"
				data-testid="description_input"
			></textarea>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Kva type spel er det?</span>
			</label>
			<div class="flex flex-col gap-2 pl-4">
				<label class="cursor-pointer flex items-center gap-2">
					<input
						type="radio"
						name="gameType"
						class="radio"
						value="Rollespel"
						data-bind="gameType"
					/>
					<span>Rollespel</span>
				</label>
				<label class="cursor-pointer flex items-center gap-2">
					<input
						type="radio"
						name="gameType"
						class="radio"
						value="Brettspel"
						data-bind="gameType"
					/>
					<span>Brettspel</span>
				</label>
				<label class="cursor-pointer flex items-center gap-2">
					<input
						type="radio"
						name="gameType"
						class="radio"
						value="LARP"
						data-bind="gameType"
					/>
					<span>LARP</span>
				</label>
				<label class="cursor-pointer flex items-center gap-2">
					<input
						type="radio"
						name="gameType"
						class="radio"
						value="Annet"
						data-bind="gameType"
					/>
					<span>Annet</span>
				</label>
			</div>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Maks antall spillere</span>
			</label>
			<input
				class="input input-bordered"
				type="number"
				min="0"
				data-bind="maxPlayers"
				data-testid="maxPlayers_input"
			/>
		</div>
		<div class="form-control">
			<label class="label">
				<span class="label-text">Kan for øvrig kan du arrangere?</span>
			</label>
			<div class="flex flex-col gap-2 pl-4">
				<label class="cursor-pointer flex items-center gap-2">
					<input
						type="checkbox"
						class="checkbox"
						data-bind="fridayEvening"
					/>
					<span>Fredag Kveld</span>
				</label>
				<label class="cursor-pointer flex items-center gap-2">
					<input
						type="checkbox"
						class="checkbox"
						data-bind="saturdayMorning"
					/>
					<span>Lørdag Morgen</span>
				</label>
				<label class="cursor-pointer flex items-center gap-2">
					<input
						type="checkbox"
						class="checkbox"
						data-bind="saturdayEvening"
					/>
					<span>Lørdag Kveld</span>
				</label>
				<label class="cursor-pointer flex items-center gap-2">
					<input
						type="checkbox"
						class="checkbox"
						data-bind="sundayMorning"
					/>
					<span>Søndag Morgen</span>
				</label>
			</div>
		</div>
		<div>
			<button
				class="btn btn-primary"
				type="submit"
				data-on-click={ datastar.PostSSE("/event/api/new/inline_validation/data") }
			>
				Send inn arrangement
			</button>
		</div>
	</form>
}
